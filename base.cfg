######################################################
# Base Configuration; this provides sane defaults
# for commonly used parts.
# ---------------------------------------------------
#
# Buildout instructions in this file are
# usually only changed by experienced developers.
#
# Beyond here there be dragons!

[settings]
checkout-branch = main
effective-user =
buildout-user =
compile-mo-files-in-zope = true

[buildout]
eggs-directory = eggs
download-cache = downloads

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# pick final releases over newer development releases
prefer-final = true

# show picked versions wherever we do an automatic choice
show-picked-versions = true

versions = versions

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    https://dist.plone.org
    https://download.zope.org/ppix/
    https://download.zope.org/distribution/

index = https://pypi.python.org/simple

# buildout.DumpPickedVersions notifies
# you of versions picked by buildout that were not specifically
# pinned.
# buildout.sanitycheck makes sure you're not running buildout
# as root.
extensions =
    buildout.sanitycheck
    mr.developer

# Pull in version pins
extends =
    https://dist.plone.org/release/5.2.14/versions.cfg
    versions-picked.cfg
    versions-sliding.cfg

# List eggs here
eggs =
    Pillow
    Plone
    six
    PyICU
    z3c.jbot
# Zopra
    PyHtmlGUI
    pyqrnative
    zopra.core
# Hotfixes

# develop list is maintainted via mr.developer
develop =


zcml =
# Every package listed here will be loaded before plone.app.locales, so that those packages can override msgids in the plone domain
# Other packages with no autoinclude in setup.py will be listed here

# mr.developer settings:
always-checkout = true
sources = sources
auto-checkout = *

var-dir=${buildout:directory}/var
backups-dir=${buildout:var-dir}

############################################
# Environment Variables
# ---------------------
# Some of the behavior of your Zope/Plone instances are controlled with OS
# environment variables. You may set those here in a key / value format.
# Some common settings:
#    * TZ allows you to set a time zone for systems where it's not
#      automatically available.
#    * zope_i18n_compile_mo_files allows for automatic compilation of
#      missing translation files (may slow startup).
#    * zope_i18n_allowed_languages allows you to limit the available
#      translations.
#    * PYTHON_EGG_CACHE determines where zipped python packages are unpacked
#      for use.
#    * PYTHONHASHSEED determines initial seed for hashes. "random" causes a
#      pseudo-random value is used to seed the hashes of str, bytes and datetime
#      objects.
environment-vars =
    LC_TIME C
    TZ Europe/Berlin
    zope_i18n_compile_mo_files ${settings:compile-mo-files-in-zope}
    PYTHON_EGG_CACHE ${buildout:directory}/var/.python-eggs

[sources]
zopra.core = git https://github.com/zopratec/zopra.core.git branch=${settings:checkout-branch}
PyHtmlGUI = git https://github.com/zopratec/pyhtmlgui.git branch=${settings:checkout-branch}
pyqrnative = git https://github.com/zopratec/pyqrnative.git branch=main

[instance_base]
# Use this section to install and configure a Zope operating
# instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance

# The line below sets only the initial password. It will not change an
# existing password.
user = ${settings:zope-user}
# if we try to start as root, Zope will switch to the user below (Note: has no effect for WSGI version)
effective-user = ${settings:effective-user}
# change debug-mode to "on" to run in development mode.
# starting in foreground (fg) mode is a better way to do this.
debug-mode = off
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
# change deprecation-warnings to "on" to get log warnings
# for deprecated usages.
deprecation-warnings = ${buildout:deprecation-warnings}

# storage locations
var = ${buildout:var-dir}
blob-storage = ${:var}/blobstorage

# Comment the next four lines out if you don't need
# automatic log rotation for event and access logs.
event-log-max-size = 5 MB
event-log-old-files = 5
access-log-max-size = 20 MB
access-log-old-files = 5

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}

[zeoserver_base]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
#
# If we try to start as root, Zope will switch to the user below
effective-user = ${settings:effective-user}
# Set storage
var = ${buildout:var-dir}
blob-storage = ${buildout:var-dir}/blobstorage
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:var-dir}/zeoserver/zeoserver.log
pid-file    = ${buildout:var-dir}/zeoserver/zeoserver.pid
socket-name = ${buildout:var-dir}/zeoserver/zeo.zdsock
pack-days   = 1

[client_base]
# Use this section to install and configure a ZEO client
# instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance

# The line below sets only the initial password. It will not change an
# existing password.
user = ${settings:zope-user}
# if we try to start as root, Zope will switch to the user below (Note: has no effect for WSGI version)
effective-user = ${settings:effective-user}
# change debug-mode to "on" to run in development mode.
# starting in foreground (fg) mode is a better way to do this.
debug-mode = off
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
# change deprecation-warnings to "on" to get log warnings
# for deprecated usages.
deprecation-warnings = ${buildout:deprecation-warnings}

# base locations
var = ${buildout:var-dir}
blob-storage = ${:var}/blobstorage

# Comment the next four lines out if you don't need
# automatic log rotation for event and access logs.
event-log-max-size = 5 MB
event-log-old-files = 5
access-log-max-size = 20 MB
access-log-old-files = 5

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}

zeo-client = true
# shared blobs are much faster if we're on the same server.
# if not, turn it off.
shared-blob = on

# defer early binding to port; may improve load balancer behavior on restarts
http-fast-listen = off

# Put the log, pid, lock files in var/client1
event-log = ${buildout:var-dir}/${:_buildout_section_name_}/event.log
z2-log    = disable
pid-file  = ${buildout:var-dir}/${:_buildout_section_name_}/${:_buildout_section_name_}.pid
lock-file = ${buildout:var-dir}/${:_buildout_section_name_}/${:_buildout_section_name_}.lock

[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo

[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/backups
blobbackuplocation = ${buildout:backups-dir}/blobstoragebackups
snapshotlocation = ${buildout:backups-dir}/snapshotbackups
blobsnapshotlocation = ${buildout:backups-dir}/blobstoragesnapshots
datafs = ${buildout:var-dir}/filestorage/Data.fs
blob-storage = ${buildout:var-dir}/blobstorage
keep = 7
enable_fullbackup = true

[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = python-interpreter
scripts = zopepy

[pyccleaner]
# Deletes all compiled Python files from the src eggs
# This ensures removed modules are purged correctly since Git only
# tracks the source Python files.
recipe = plone.recipe.command
command = find ${buildout:directory}/src -iname "*.pyc" -delete
update-command = ${:command}

[precompiler]
# This recipe is used in production installs to compile
# .py and .po files so that the daemon doesn't try to do it.
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
recipe = plone.recipe.precompiler
eggs = ${buildout:eggs}
compile-mo-files = true
extra-paths = ${buildout:directory}/products
quiet = true

[checkinterval]
recipe = cs.recipe.checkinterval
